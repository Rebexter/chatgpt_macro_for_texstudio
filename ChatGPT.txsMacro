{
    "abbrev": "",
    "description": [
        "Highlight any text in your document and run the macro using the shortcut Shift+F1 or by clicking on it. Watch as the power of AI enhances your LaTeX documents!"
    ],
    "formatVersion": 1,
    "menu": "",
    "name": "ChatGPT",
    "shortcut": "Shift+F1",
    "tag": [
        "%SCRIPT",
        "",
        "// #########################################################################",
        "// Set the path to Python3 and the Python script",
        "var python_path = \"/usr/bin/python3\";\t\t\t\t// *** edit this line **",
        "var script_path = \"/path/to/openai_python_script.py\"; // *** edit this line **",
        "// #########################################################################",
        "// From here on, no more adjustments are usually necessary:",
        "",
        "// Get the selected text from the editor",
        "var prompt = cursor.selectedText()",
        "// Insert a newline character after the selected text",
        "editor.insertText(prompt + \"\\n\");",
        "",
        "// Check if any text is selected",
        "if (prompt === \"\") {",
        "    // Show an alert message if no text is selected",
        "    alert(\"Please select some text before running the ChatGPT-macro.\");",
        "} else {\t",
        "\t// Construct the Python command to run the OpenAI script with the selected text as an argument",
        "\tvar command =  python_path + \" \" + script_path + \" \\\"\" + prompt + \"\\\"\";\t",
        "\t// Execute the Python command and capture the output",
        "\texecute(command);",
        "}",
        "",
        "",
        "// Function to execute a command",
        "function execute(command) {",
        "",
        "\tcmd = system(command + \" > /dev/null\");",
        "",
        "\tvar menu = app.getManagedMenu(\"main/macros\");                 //get macro menu",
        "\tvar act = app.newManagedAction(menu, \"ChatGPT\", \"Stop ChatGPT\");   //add action",
        "    act.triggered.connect(function(){cmd.terminate();});          //define what should happen when action is triggered\t",
        "",
        "\t// Connect to the standard output stream of the executed command and write the output to the editor",
        "\tcmd.standardOutputRead.connect(function(output) {",
        "\t\teditor.write(output);",
        "    });",
        "",
        "    // Connect to the finished signal of the executed command and perform cleanup",
        "\t// this step is required as sometimes unwanted closing brackets are inserted by autocompletion",
        "    cmd.finished.connect(function(exitCode) {",
        "        editor.write(\"\\ncleanup...\");",
        "\t\t// for some reasons the cursor.eraseline did not work here, therefore we just replace",
        "\t\t// the unwanted closing brackets with an empty space",
        "\t\teditor.replace(/cleanup\\.\\.\\.([}\\]]*)/g, \"\", \"\", \"\");",
        "    });",
        "}",
        ""
    ],
    "trigger": ""
}
